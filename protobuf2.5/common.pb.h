// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#ifndef PROTOBUF_common_2eproto__INCLUDED
#define PROTOBUF_common_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace message {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_common_2eproto();
void protobuf_AssignDesc_common_2eproto();
void protobuf_ShutdownFile_common_2eproto();

class User;
class AccountRegisterRequest;
class AccountRegisterResponse;
class UserLoginRequest;
class UserLoginResponse;
class ChatRequest;
class ChatHistoryRequest;
class MessageInfo;
class MsgCacheInfo;
class ChatResponse;
class ChatUpdateRequest;

enum AccountRegisterRequest_MSGID {
  AccountRegisterRequest_MSGID_ID = 100
};
bool AccountRegisterRequest_MSGID_IsValid(int value);
const AccountRegisterRequest_MSGID AccountRegisterRequest_MSGID_MSGID_MIN = AccountRegisterRequest_MSGID_ID;
const AccountRegisterRequest_MSGID AccountRegisterRequest_MSGID_MSGID_MAX = AccountRegisterRequest_MSGID_ID;
const int AccountRegisterRequest_MSGID_MSGID_ARRAYSIZE = AccountRegisterRequest_MSGID_MSGID_MAX + 1;

enum AccountRegisterResponse_MSGID {
  AccountRegisterResponse_MSGID_ID = 101
};
bool AccountRegisterResponse_MSGID_IsValid(int value);
const AccountRegisterResponse_MSGID AccountRegisterResponse_MSGID_MSGID_MIN = AccountRegisterResponse_MSGID_ID;
const AccountRegisterResponse_MSGID AccountRegisterResponse_MSGID_MSGID_MAX = AccountRegisterResponse_MSGID_ID;
const int AccountRegisterResponse_MSGID_MSGID_ARRAYSIZE = AccountRegisterResponse_MSGID_MSGID_MAX + 1;

enum AccountRegisterResponse_RegRetCode {
  AccountRegisterResponse_RegRetCode_CODE_SUCCESS = 0,
  AccountRegisterResponse_RegRetCode_CODE_SAME_NAME = 1,
  AccountRegisterResponse_RegRetCode_CODE_INSERT_ERROR = 3
};
bool AccountRegisterResponse_RegRetCode_IsValid(int value);
const AccountRegisterResponse_RegRetCode AccountRegisterResponse_RegRetCode_RegRetCode_MIN = AccountRegisterResponse_RegRetCode_CODE_SUCCESS;
const AccountRegisterResponse_RegRetCode AccountRegisterResponse_RegRetCode_RegRetCode_MAX = AccountRegisterResponse_RegRetCode_CODE_INSERT_ERROR;
const int AccountRegisterResponse_RegRetCode_RegRetCode_ARRAYSIZE = AccountRegisterResponse_RegRetCode_RegRetCode_MAX + 1;

enum UserLoginRequest_MSGID {
  UserLoginRequest_MSGID_ID = 102
};
bool UserLoginRequest_MSGID_IsValid(int value);
const UserLoginRequest_MSGID UserLoginRequest_MSGID_MSGID_MIN = UserLoginRequest_MSGID_ID;
const UserLoginRequest_MSGID UserLoginRequest_MSGID_MSGID_MAX = UserLoginRequest_MSGID_ID;
const int UserLoginRequest_MSGID_MSGID_ARRAYSIZE = UserLoginRequest_MSGID_MSGID_MAX + 1;

enum UserLoginResponse_MSGID {
  UserLoginResponse_MSGID_ID = 103
};
bool UserLoginResponse_MSGID_IsValid(int value);
const UserLoginResponse_MSGID UserLoginResponse_MSGID_MSGID_MIN = UserLoginResponse_MSGID_ID;
const UserLoginResponse_MSGID UserLoginResponse_MSGID_MSGID_MAX = UserLoginResponse_MSGID_ID;
const int UserLoginResponse_MSGID_MSGID_ARRAYSIZE = UserLoginResponse_MSGID_MSGID_MAX + 1;

enum UserLoginResponse_LoginRetCode {
  UserLoginResponse_LoginRetCode_CODE_SUCCESS = 0,
  UserLoginResponse_LoginRetCode_CODE_ERROR = 1,
  UserLoginResponse_LoginRetCode_CODE_FAILURE = 2
};
bool UserLoginResponse_LoginRetCode_IsValid(int value);
const UserLoginResponse_LoginRetCode UserLoginResponse_LoginRetCode_LoginRetCode_MIN = UserLoginResponse_LoginRetCode_CODE_SUCCESS;
const UserLoginResponse_LoginRetCode UserLoginResponse_LoginRetCode_LoginRetCode_MAX = UserLoginResponse_LoginRetCode_CODE_FAILURE;
const int UserLoginResponse_LoginRetCode_LoginRetCode_ARRAYSIZE = UserLoginResponse_LoginRetCode_LoginRetCode_MAX + 1;

enum ChatRequest_MSGID {
  ChatRequest_MSGID_ID = 104
};
bool ChatRequest_MSGID_IsValid(int value);
const ChatRequest_MSGID ChatRequest_MSGID_MSGID_MIN = ChatRequest_MSGID_ID;
const ChatRequest_MSGID ChatRequest_MSGID_MSGID_MAX = ChatRequest_MSGID_ID;
const int ChatRequest_MSGID_MSGID_ARRAYSIZE = ChatRequest_MSGID_MSGID_MAX + 1;

enum ChatHistoryRequest_MSGID {
  ChatHistoryRequest_MSGID_ID = 106
};
bool ChatHistoryRequest_MSGID_IsValid(int value);
const ChatHistoryRequest_MSGID ChatHistoryRequest_MSGID_MSGID_MIN = ChatHistoryRequest_MSGID_ID;
const ChatHistoryRequest_MSGID ChatHistoryRequest_MSGID_MSGID_MAX = ChatHistoryRequest_MSGID_ID;
const int ChatHistoryRequest_MSGID_MSGID_ARRAYSIZE = ChatHistoryRequest_MSGID_MSGID_MAX + 1;

enum ChatResponse_ChatType {
  ChatResponse_ChatType_CHAT_TYPE_NORMAL = 0,
  ChatResponse_ChatType_CHAT_TYPE_HISTORY = 1,
  ChatResponse_ChatType_CHAT_TYPE_UPDATE = 2
};
bool ChatResponse_ChatType_IsValid(int value);
const ChatResponse_ChatType ChatResponse_ChatType_ChatType_MIN = ChatResponse_ChatType_CHAT_TYPE_NORMAL;
const ChatResponse_ChatType ChatResponse_ChatType_ChatType_MAX = ChatResponse_ChatType_CHAT_TYPE_UPDATE;
const int ChatResponse_ChatType_ChatType_ARRAYSIZE = ChatResponse_ChatType_ChatType_MAX + 1;

enum ChatResponse_MSGID {
  ChatResponse_MSGID_ID = 105
};
bool ChatResponse_MSGID_IsValid(int value);
const ChatResponse_MSGID ChatResponse_MSGID_MSGID_MIN = ChatResponse_MSGID_ID;
const ChatResponse_MSGID ChatResponse_MSGID_MSGID_MAX = ChatResponse_MSGID_ID;
const int ChatResponse_MSGID_MSGID_ARRAYSIZE = ChatResponse_MSGID_MSGID_MAX + 1;

enum ChatUpdateRequest_MSGID {
  ChatUpdateRequest_MSGID_ID = 108
};
bool ChatUpdateRequest_MSGID_IsValid(int value);
const ChatUpdateRequest_MSGID ChatUpdateRequest_MSGID_MSGID_MIN = ChatUpdateRequest_MSGID_ID;
const ChatUpdateRequest_MSGID ChatUpdateRequest_MSGID_MSGID_MAX = ChatUpdateRequest_MSGID_ID;
const int ChatUpdateRequest_MSGID_MSGID_ARRAYSIZE = ChatUpdateRequest_MSGID_MSGID_MAX + 1;

// ===================================================================

class User : public ::google::protobuf::MessageLite {
 public:
  User();
  virtual ~User();

  User(const User& from);

  inline User& operator=(const User& from) {
    CopyFrom(from);
    return *this;
  }

  static const User& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const User* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(User* other);

  // implements Message ----------------------------------------------

  User* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const User& from);
  void MergeFrom(const User& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:message.User)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();

  ::std::string* name_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_common_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_common_2eproto();
  #endif
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static User* default_instance_;
};
// -------------------------------------------------------------------

class AccountRegisterRequest : public ::google::protobuf::MessageLite {
 public:
  AccountRegisterRequest();
  virtual ~AccountRegisterRequest();

  AccountRegisterRequest(const AccountRegisterRequest& from);

  inline AccountRegisterRequest& operator=(const AccountRegisterRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const AccountRegisterRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const AccountRegisterRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(AccountRegisterRequest* other);

  // implements Message ----------------------------------------------

  AccountRegisterRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const AccountRegisterRequest& from);
  void MergeFrom(const AccountRegisterRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef AccountRegisterRequest_MSGID MSGID;
  static const MSGID ID = AccountRegisterRequest_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return AccountRegisterRequest_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    AccountRegisterRequest_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    AccountRegisterRequest_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    AccountRegisterRequest_MSGID_MSGID_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // required bytes register_name = 2;
  inline bool has_register_name() const;
  inline void clear_register_name();
  static const int kRegisterNameFieldNumber = 2;
  inline const ::std::string& register_name() const;
  inline void set_register_name(const ::std::string& value);
  inline void set_register_name(const char* value);
  inline void set_register_name(const void* value, size_t size);
  inline ::std::string* mutable_register_name();
  inline ::std::string* release_register_name();
  inline void set_allocated_register_name(::std::string* register_name);

  // required bytes register_password = 3;
  inline bool has_register_password() const;
  inline void clear_register_password();
  static const int kRegisterPasswordFieldNumber = 3;
  inline const ::std::string& register_password() const;
  inline void set_register_password(const ::std::string& value);
  inline void set_register_password(const char* value);
  inline void set_register_password(const void* value, size_t size);
  inline ::std::string* mutable_register_password();
  inline ::std::string* release_register_password();
  inline void set_allocated_register_password(::std::string* register_password);

  // @@protoc_insertion_point(class_scope:message.AccountRegisterRequest)
 private:
  inline void set_has_register_name();
  inline void clear_has_register_name();
  inline void set_has_register_password();
  inline void clear_has_register_password();

  ::std::string* register_name_;
  ::std::string* register_password_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_common_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_common_2eproto();
  #endif
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static AccountRegisterRequest* default_instance_;
};
// -------------------------------------------------------------------

class AccountRegisterResponse : public ::google::protobuf::MessageLite {
 public:
  AccountRegisterResponse();
  virtual ~AccountRegisterResponse();

  AccountRegisterResponse(const AccountRegisterResponse& from);

  inline AccountRegisterResponse& operator=(const AccountRegisterResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const AccountRegisterResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const AccountRegisterResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(AccountRegisterResponse* other);

  // implements Message ----------------------------------------------

  AccountRegisterResponse* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const AccountRegisterResponse& from);
  void MergeFrom(const AccountRegisterResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef AccountRegisterResponse_MSGID MSGID;
  static const MSGID ID = AccountRegisterResponse_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return AccountRegisterResponse_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    AccountRegisterResponse_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    AccountRegisterResponse_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    AccountRegisterResponse_MSGID_MSGID_ARRAYSIZE;

  typedef AccountRegisterResponse_RegRetCode RegRetCode;
  static const RegRetCode CODE_SUCCESS = AccountRegisterResponse_RegRetCode_CODE_SUCCESS;
  static const RegRetCode CODE_SAME_NAME = AccountRegisterResponse_RegRetCode_CODE_SAME_NAME;
  static const RegRetCode CODE_INSERT_ERROR = AccountRegisterResponse_RegRetCode_CODE_INSERT_ERROR;
  static inline bool RegRetCode_IsValid(int value) {
    return AccountRegisterResponse_RegRetCode_IsValid(value);
  }
  static const RegRetCode RegRetCode_MIN =
    AccountRegisterResponse_RegRetCode_RegRetCode_MIN;
  static const RegRetCode RegRetCode_MAX =
    AccountRegisterResponse_RegRetCode_RegRetCode_MAX;
  static const int RegRetCode_ARRAYSIZE =
    AccountRegisterResponse_RegRetCode_RegRetCode_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // required .message.AccountRegisterResponse.RegRetCode ret_code = 3;
  inline bool has_ret_code() const;
  inline void clear_ret_code();
  static const int kRetCodeFieldNumber = 3;
  inline ::message::AccountRegisterResponse_RegRetCode ret_code() const;
  inline void set_ret_code(::message::AccountRegisterResponse_RegRetCode value);

  // required uint32 userid = 4;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 4;
  inline ::google::protobuf::uint32 userid() const;
  inline void set_userid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:message.AccountRegisterResponse)
 private:
  inline void set_has_ret_code();
  inline void clear_has_ret_code();
  inline void set_has_userid();
  inline void clear_has_userid();

  int ret_code_;
  ::google::protobuf::uint32 userid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_common_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_common_2eproto();
  #endif
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static AccountRegisterResponse* default_instance_;
};
// -------------------------------------------------------------------

class UserLoginRequest : public ::google::protobuf::MessageLite {
 public:
  UserLoginRequest();
  virtual ~UserLoginRequest();

  UserLoginRequest(const UserLoginRequest& from);

  inline UserLoginRequest& operator=(const UserLoginRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const UserLoginRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const UserLoginRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(UserLoginRequest* other);

  // implements Message ----------------------------------------------

  UserLoginRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const UserLoginRequest& from);
  void MergeFrom(const UserLoginRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef UserLoginRequest_MSGID MSGID;
  static const MSGID ID = UserLoginRequest_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return UserLoginRequest_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    UserLoginRequest_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    UserLoginRequest_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    UserLoginRequest_MSGID_MSGID_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // required bytes login_name = 2;
  inline bool has_login_name() const;
  inline void clear_login_name();
  static const int kLoginNameFieldNumber = 2;
  inline const ::std::string& login_name() const;
  inline void set_login_name(const ::std::string& value);
  inline void set_login_name(const char* value);
  inline void set_login_name(const void* value, size_t size);
  inline ::std::string* mutable_login_name();
  inline ::std::string* release_login_name();
  inline void set_allocated_login_name(::std::string* login_name);

  // required bytes login_password = 3;
  inline bool has_login_password() const;
  inline void clear_login_password();
  static const int kLoginPasswordFieldNumber = 3;
  inline const ::std::string& login_password() const;
  inline void set_login_password(const ::std::string& value);
  inline void set_login_password(const char* value);
  inline void set_login_password(const void* value, size_t size);
  inline ::std::string* mutable_login_password();
  inline ::std::string* release_login_password();
  inline void set_allocated_login_password(::std::string* login_password);

  // @@protoc_insertion_point(class_scope:message.UserLoginRequest)
 private:
  inline void set_has_login_name();
  inline void clear_has_login_name();
  inline void set_has_login_password();
  inline void clear_has_login_password();

  ::std::string* login_name_;
  ::std::string* login_password_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_common_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_common_2eproto();
  #endif
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static UserLoginRequest* default_instance_;
};
// -------------------------------------------------------------------

class UserLoginResponse : public ::google::protobuf::MessageLite {
 public:
  UserLoginResponse();
  virtual ~UserLoginResponse();

  UserLoginResponse(const UserLoginResponse& from);

  inline UserLoginResponse& operator=(const UserLoginResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const UserLoginResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const UserLoginResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(UserLoginResponse* other);

  // implements Message ----------------------------------------------

  UserLoginResponse* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const UserLoginResponse& from);
  void MergeFrom(const UserLoginResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef UserLoginResponse_MSGID MSGID;
  static const MSGID ID = UserLoginResponse_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return UserLoginResponse_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    UserLoginResponse_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    UserLoginResponse_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    UserLoginResponse_MSGID_MSGID_ARRAYSIZE;

  typedef UserLoginResponse_LoginRetCode LoginRetCode;
  static const LoginRetCode CODE_SUCCESS = UserLoginResponse_LoginRetCode_CODE_SUCCESS;
  static const LoginRetCode CODE_ERROR = UserLoginResponse_LoginRetCode_CODE_ERROR;
  static const LoginRetCode CODE_FAILURE = UserLoginResponse_LoginRetCode_CODE_FAILURE;
  static inline bool LoginRetCode_IsValid(int value) {
    return UserLoginResponse_LoginRetCode_IsValid(value);
  }
  static const LoginRetCode LoginRetCode_MIN =
    UserLoginResponse_LoginRetCode_LoginRetCode_MIN;
  static const LoginRetCode LoginRetCode_MAX =
    UserLoginResponse_LoginRetCode_LoginRetCode_MAX;
  static const int LoginRetCode_ARRAYSIZE =
    UserLoginResponse_LoginRetCode_LoginRetCode_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // required .message.UserLoginResponse.LoginRetCode ret_code = 3;
  inline bool has_ret_code() const;
  inline void clear_ret_code();
  static const int kRetCodeFieldNumber = 3;
  inline ::message::UserLoginResponse_LoginRetCode ret_code() const;
  inline void set_ret_code(::message::UserLoginResponse_LoginRetCode value);

  // required uint32 userid = 4;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 4;
  inline ::google::protobuf::uint32 userid() const;
  inline void set_userid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:message.UserLoginResponse)
 private:
  inline void set_has_ret_code();
  inline void clear_has_ret_code();
  inline void set_has_userid();
  inline void clear_has_userid();

  int ret_code_;
  ::google::protobuf::uint32 userid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_common_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_common_2eproto();
  #endif
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static UserLoginResponse* default_instance_;
};
// -------------------------------------------------------------------

class ChatRequest : public ::google::protobuf::MessageLite {
 public:
  ChatRequest();
  virtual ~ChatRequest();

  ChatRequest(const ChatRequest& from);

  inline ChatRequest& operator=(const ChatRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ChatRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ChatRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ChatRequest* other);

  // implements Message ----------------------------------------------

  ChatRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ChatRequest& from);
  void MergeFrom(const ChatRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef ChatRequest_MSGID MSGID;
  static const MSGID ID = ChatRequest_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ChatRequest_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ChatRequest_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ChatRequest_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ChatRequest_MSGID_MSGID_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // required bytes chat_content = 3;
  inline bool has_chat_content() const;
  inline void clear_chat_content();
  static const int kChatContentFieldNumber = 3;
  inline const ::std::string& chat_content() const;
  inline void set_chat_content(const ::std::string& value);
  inline void set_chat_content(const char* value);
  inline void set_chat_content(const void* value, size_t size);
  inline ::std::string* mutable_chat_content();
  inline ::std::string* release_chat_content();
  inline void set_allocated_chat_content(::std::string* chat_content);

  // @@protoc_insertion_point(class_scope:message.ChatRequest)
 private:
  inline void set_has_chat_content();
  inline void clear_has_chat_content();

  ::std::string* chat_content_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_common_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_common_2eproto();
  #endif
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static ChatRequest* default_instance_;
};
// -------------------------------------------------------------------

class ChatHistoryRequest : public ::google::protobuf::MessageLite {
 public:
  ChatHistoryRequest();
  virtual ~ChatHistoryRequest();

  ChatHistoryRequest(const ChatHistoryRequest& from);

  inline ChatHistoryRequest& operator=(const ChatHistoryRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ChatHistoryRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ChatHistoryRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ChatHistoryRequest* other);

  // implements Message ----------------------------------------------

  ChatHistoryRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ChatHistoryRequest& from);
  void MergeFrom(const ChatHistoryRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef ChatHistoryRequest_MSGID MSGID;
  static const MSGID ID = ChatHistoryRequest_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ChatHistoryRequest_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ChatHistoryRequest_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ChatHistoryRequest_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ChatHistoryRequest_MSGID_MSGID_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional uint32 last_time = 2;
  inline bool has_last_time() const;
  inline void clear_last_time();
  static const int kLastTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 last_time() const;
  inline void set_last_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:message.ChatHistoryRequest)
 private:
  inline void set_has_last_time();
  inline void clear_has_last_time();

  ::google::protobuf::uint32 last_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_common_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_common_2eproto();
  #endif
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static ChatHistoryRequest* default_instance_;
};
// -------------------------------------------------------------------

class MessageInfo : public ::google::protobuf::MessageLite {
 public:
  MessageInfo();
  virtual ~MessageInfo();

  MessageInfo(const MessageInfo& from);

  inline MessageInfo& operator=(const MessageInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const MessageInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const MessageInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(MessageInfo* other);

  // implements Message ----------------------------------------------

  MessageInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const MessageInfo& from);
  void MergeFrom(const MessageInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes chat_content = 3;
  inline bool has_chat_content() const;
  inline void clear_chat_content();
  static const int kChatContentFieldNumber = 3;
  inline const ::std::string& chat_content() const;
  inline void set_chat_content(const ::std::string& value);
  inline void set_chat_content(const char* value);
  inline void set_chat_content(const void* value, size_t size);
  inline ::std::string* mutable_chat_content();
  inline ::std::string* release_chat_content();
  inline void set_allocated_chat_content(::std::string* chat_content);

  // required uint32 send_userid = 4;
  inline bool has_send_userid() const;
  inline void clear_send_userid();
  static const int kSendUseridFieldNumber = 4;
  inline ::google::protobuf::uint32 send_userid() const;
  inline void set_send_userid(::google::protobuf::uint32 value);

  // required uint32 send_time = 5;
  inline bool has_send_time() const;
  inline void clear_send_time();
  static const int kSendTimeFieldNumber = 5;
  inline ::google::protobuf::uint32 send_time() const;
  inline void set_send_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:message.MessageInfo)
 private:
  inline void set_has_chat_content();
  inline void clear_has_chat_content();
  inline void set_has_send_userid();
  inline void clear_has_send_userid();
  inline void set_has_send_time();
  inline void clear_has_send_time();

  ::std::string* chat_content_;
  ::google::protobuf::uint32 send_userid_;
  ::google::protobuf::uint32 send_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_common_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_common_2eproto();
  #endif
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static MessageInfo* default_instance_;
};
// -------------------------------------------------------------------

class MsgCacheInfo : public ::google::protobuf::MessageLite {
 public:
  MsgCacheInfo();
  virtual ~MsgCacheInfo();

  MsgCacheInfo(const MsgCacheInfo& from);

  inline MsgCacheInfo& operator=(const MsgCacheInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const MsgCacheInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const MsgCacheInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(MsgCacheInfo* other);

  // implements Message ----------------------------------------------

  MsgCacheInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const MsgCacheInfo& from);
  void MergeFrom(const MsgCacheInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .message.MessageInfo message = 2;
  inline int message_size() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 2;
  inline const ::message::MessageInfo& message(int index) const;
  inline ::message::MessageInfo* mutable_message(int index);
  inline ::message::MessageInfo* add_message();
  inline const ::google::protobuf::RepeatedPtrField< ::message::MessageInfo >&
      message() const;
  inline ::google::protobuf::RepeatedPtrField< ::message::MessageInfo >*
      mutable_message();

  // @@protoc_insertion_point(class_scope:message.MsgCacheInfo)
 private:

  ::google::protobuf::RepeatedPtrField< ::message::MessageInfo > message_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_common_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_common_2eproto();
  #endif
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static MsgCacheInfo* default_instance_;
};
// -------------------------------------------------------------------

class ChatResponse : public ::google::protobuf::MessageLite {
 public:
  ChatResponse();
  virtual ~ChatResponse();

  ChatResponse(const ChatResponse& from);

  inline ChatResponse& operator=(const ChatResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ChatResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ChatResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ChatResponse* other);

  // implements Message ----------------------------------------------

  ChatResponse* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ChatResponse& from);
  void MergeFrom(const ChatResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef ChatResponse_ChatType ChatType;
  static const ChatType CHAT_TYPE_NORMAL = ChatResponse_ChatType_CHAT_TYPE_NORMAL;
  static const ChatType CHAT_TYPE_HISTORY = ChatResponse_ChatType_CHAT_TYPE_HISTORY;
  static const ChatType CHAT_TYPE_UPDATE = ChatResponse_ChatType_CHAT_TYPE_UPDATE;
  static inline bool ChatType_IsValid(int value) {
    return ChatResponse_ChatType_IsValid(value);
  }
  static const ChatType ChatType_MIN =
    ChatResponse_ChatType_ChatType_MIN;
  static const ChatType ChatType_MAX =
    ChatResponse_ChatType_ChatType_MAX;
  static const int ChatType_ARRAYSIZE =
    ChatResponse_ChatType_ChatType_ARRAYSIZE;

  typedef ChatResponse_MSGID MSGID;
  static const MSGID ID = ChatResponse_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ChatResponse_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ChatResponse_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ChatResponse_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ChatResponse_MSGID_MSGID_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // required .message.ChatResponse.ChatType chat_type = 2;
  inline bool has_chat_type() const;
  inline void clear_chat_type();
  static const int kChatTypeFieldNumber = 2;
  inline ::message::ChatResponse_ChatType chat_type() const;
  inline void set_chat_type(::message::ChatResponse_ChatType value);

  // repeated .message.MessageInfo message = 3;
  inline int message_size() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 3;
  inline const ::message::MessageInfo& message(int index) const;
  inline ::message::MessageInfo* mutable_message(int index);
  inline ::message::MessageInfo* add_message();
  inline const ::google::protobuf::RepeatedPtrField< ::message::MessageInfo >&
      message() const;
  inline ::google::protobuf::RepeatedPtrField< ::message::MessageInfo >*
      mutable_message();

  // @@protoc_insertion_point(class_scope:message.ChatResponse)
 private:
  inline void set_has_chat_type();
  inline void clear_has_chat_type();

  ::google::protobuf::RepeatedPtrField< ::message::MessageInfo > message_;
  int chat_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_common_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_common_2eproto();
  #endif
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static ChatResponse* default_instance_;
};
// -------------------------------------------------------------------

class ChatUpdateRequest : public ::google::protobuf::MessageLite {
 public:
  ChatUpdateRequest();
  virtual ~ChatUpdateRequest();

  ChatUpdateRequest(const ChatUpdateRequest& from);

  inline ChatUpdateRequest& operator=(const ChatUpdateRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ChatUpdateRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ChatUpdateRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ChatUpdateRequest* other);

  // implements Message ----------------------------------------------

  ChatUpdateRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ChatUpdateRequest& from);
  void MergeFrom(const ChatUpdateRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef ChatUpdateRequest_MSGID MSGID;
  static const MSGID ID = ChatUpdateRequest_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ChatUpdateRequest_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ChatUpdateRequest_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ChatUpdateRequest_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ChatUpdateRequest_MSGID_MSGID_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // required uint32 last_time = 2;
  inline bool has_last_time() const;
  inline void clear_last_time();
  static const int kLastTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 last_time() const;
  inline void set_last_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:message.ChatUpdateRequest)
 private:
  inline void set_has_last_time();
  inline void clear_has_last_time();

  ::google::protobuf::uint32 last_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_common_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_common_2eproto();
  #endif
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static ChatUpdateRequest* default_instance_;
};
// ===================================================================


// ===================================================================

// User

// required int32 id = 1;
inline bool User::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void User::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void User::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void User::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 User::id() const {
  return id_;
}
inline void User::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required string name = 2;
inline bool User::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void User::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void User::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void User::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& User::name() const {
  return *name_;
}
inline void User::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void User::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void User::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* User::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* User::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void User::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// AccountRegisterRequest

// required bytes register_name = 2;
inline bool AccountRegisterRequest::has_register_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AccountRegisterRequest::set_has_register_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AccountRegisterRequest::clear_has_register_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AccountRegisterRequest::clear_register_name() {
  if (register_name_ != &::google::protobuf::internal::kEmptyString) {
    register_name_->clear();
  }
  clear_has_register_name();
}
inline const ::std::string& AccountRegisterRequest::register_name() const {
  return *register_name_;
}
inline void AccountRegisterRequest::set_register_name(const ::std::string& value) {
  set_has_register_name();
  if (register_name_ == &::google::protobuf::internal::kEmptyString) {
    register_name_ = new ::std::string;
  }
  register_name_->assign(value);
}
inline void AccountRegisterRequest::set_register_name(const char* value) {
  set_has_register_name();
  if (register_name_ == &::google::protobuf::internal::kEmptyString) {
    register_name_ = new ::std::string;
  }
  register_name_->assign(value);
}
inline void AccountRegisterRequest::set_register_name(const void* value, size_t size) {
  set_has_register_name();
  if (register_name_ == &::google::protobuf::internal::kEmptyString) {
    register_name_ = new ::std::string;
  }
  register_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AccountRegisterRequest::mutable_register_name() {
  set_has_register_name();
  if (register_name_ == &::google::protobuf::internal::kEmptyString) {
    register_name_ = new ::std::string;
  }
  return register_name_;
}
inline ::std::string* AccountRegisterRequest::release_register_name() {
  clear_has_register_name();
  if (register_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = register_name_;
    register_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AccountRegisterRequest::set_allocated_register_name(::std::string* register_name) {
  if (register_name_ != &::google::protobuf::internal::kEmptyString) {
    delete register_name_;
  }
  if (register_name) {
    set_has_register_name();
    register_name_ = register_name;
  } else {
    clear_has_register_name();
    register_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes register_password = 3;
inline bool AccountRegisterRequest::has_register_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AccountRegisterRequest::set_has_register_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AccountRegisterRequest::clear_has_register_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AccountRegisterRequest::clear_register_password() {
  if (register_password_ != &::google::protobuf::internal::kEmptyString) {
    register_password_->clear();
  }
  clear_has_register_password();
}
inline const ::std::string& AccountRegisterRequest::register_password() const {
  return *register_password_;
}
inline void AccountRegisterRequest::set_register_password(const ::std::string& value) {
  set_has_register_password();
  if (register_password_ == &::google::protobuf::internal::kEmptyString) {
    register_password_ = new ::std::string;
  }
  register_password_->assign(value);
}
inline void AccountRegisterRequest::set_register_password(const char* value) {
  set_has_register_password();
  if (register_password_ == &::google::protobuf::internal::kEmptyString) {
    register_password_ = new ::std::string;
  }
  register_password_->assign(value);
}
inline void AccountRegisterRequest::set_register_password(const void* value, size_t size) {
  set_has_register_password();
  if (register_password_ == &::google::protobuf::internal::kEmptyString) {
    register_password_ = new ::std::string;
  }
  register_password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AccountRegisterRequest::mutable_register_password() {
  set_has_register_password();
  if (register_password_ == &::google::protobuf::internal::kEmptyString) {
    register_password_ = new ::std::string;
  }
  return register_password_;
}
inline ::std::string* AccountRegisterRequest::release_register_password() {
  clear_has_register_password();
  if (register_password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = register_password_;
    register_password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AccountRegisterRequest::set_allocated_register_password(::std::string* register_password) {
  if (register_password_ != &::google::protobuf::internal::kEmptyString) {
    delete register_password_;
  }
  if (register_password) {
    set_has_register_password();
    register_password_ = register_password;
  } else {
    clear_has_register_password();
    register_password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// AccountRegisterResponse

// required .message.AccountRegisterResponse.RegRetCode ret_code = 3;
inline bool AccountRegisterResponse::has_ret_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AccountRegisterResponse::set_has_ret_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AccountRegisterResponse::clear_has_ret_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AccountRegisterResponse::clear_ret_code() {
  ret_code_ = 0;
  clear_has_ret_code();
}
inline ::message::AccountRegisterResponse_RegRetCode AccountRegisterResponse::ret_code() const {
  return static_cast< ::message::AccountRegisterResponse_RegRetCode >(ret_code_);
}
inline void AccountRegisterResponse::set_ret_code(::message::AccountRegisterResponse_RegRetCode value) {
  assert(::message::AccountRegisterResponse_RegRetCode_IsValid(value));
  set_has_ret_code();
  ret_code_ = value;
}

// required uint32 userid = 4;
inline bool AccountRegisterResponse::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AccountRegisterResponse::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AccountRegisterResponse::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AccountRegisterResponse::clear_userid() {
  userid_ = 0u;
  clear_has_userid();
}
inline ::google::protobuf::uint32 AccountRegisterResponse::userid() const {
  return userid_;
}
inline void AccountRegisterResponse::set_userid(::google::protobuf::uint32 value) {
  set_has_userid();
  userid_ = value;
}

// -------------------------------------------------------------------

// UserLoginRequest

// required bytes login_name = 2;
inline bool UserLoginRequest::has_login_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserLoginRequest::set_has_login_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserLoginRequest::clear_has_login_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserLoginRequest::clear_login_name() {
  if (login_name_ != &::google::protobuf::internal::kEmptyString) {
    login_name_->clear();
  }
  clear_has_login_name();
}
inline const ::std::string& UserLoginRequest::login_name() const {
  return *login_name_;
}
inline void UserLoginRequest::set_login_name(const ::std::string& value) {
  set_has_login_name();
  if (login_name_ == &::google::protobuf::internal::kEmptyString) {
    login_name_ = new ::std::string;
  }
  login_name_->assign(value);
}
inline void UserLoginRequest::set_login_name(const char* value) {
  set_has_login_name();
  if (login_name_ == &::google::protobuf::internal::kEmptyString) {
    login_name_ = new ::std::string;
  }
  login_name_->assign(value);
}
inline void UserLoginRequest::set_login_name(const void* value, size_t size) {
  set_has_login_name();
  if (login_name_ == &::google::protobuf::internal::kEmptyString) {
    login_name_ = new ::std::string;
  }
  login_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserLoginRequest::mutable_login_name() {
  set_has_login_name();
  if (login_name_ == &::google::protobuf::internal::kEmptyString) {
    login_name_ = new ::std::string;
  }
  return login_name_;
}
inline ::std::string* UserLoginRequest::release_login_name() {
  clear_has_login_name();
  if (login_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = login_name_;
    login_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserLoginRequest::set_allocated_login_name(::std::string* login_name) {
  if (login_name_ != &::google::protobuf::internal::kEmptyString) {
    delete login_name_;
  }
  if (login_name) {
    set_has_login_name();
    login_name_ = login_name;
  } else {
    clear_has_login_name();
    login_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes login_password = 3;
inline bool UserLoginRequest::has_login_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserLoginRequest::set_has_login_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserLoginRequest::clear_has_login_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserLoginRequest::clear_login_password() {
  if (login_password_ != &::google::protobuf::internal::kEmptyString) {
    login_password_->clear();
  }
  clear_has_login_password();
}
inline const ::std::string& UserLoginRequest::login_password() const {
  return *login_password_;
}
inline void UserLoginRequest::set_login_password(const ::std::string& value) {
  set_has_login_password();
  if (login_password_ == &::google::protobuf::internal::kEmptyString) {
    login_password_ = new ::std::string;
  }
  login_password_->assign(value);
}
inline void UserLoginRequest::set_login_password(const char* value) {
  set_has_login_password();
  if (login_password_ == &::google::protobuf::internal::kEmptyString) {
    login_password_ = new ::std::string;
  }
  login_password_->assign(value);
}
inline void UserLoginRequest::set_login_password(const void* value, size_t size) {
  set_has_login_password();
  if (login_password_ == &::google::protobuf::internal::kEmptyString) {
    login_password_ = new ::std::string;
  }
  login_password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserLoginRequest::mutable_login_password() {
  set_has_login_password();
  if (login_password_ == &::google::protobuf::internal::kEmptyString) {
    login_password_ = new ::std::string;
  }
  return login_password_;
}
inline ::std::string* UserLoginRequest::release_login_password() {
  clear_has_login_password();
  if (login_password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = login_password_;
    login_password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserLoginRequest::set_allocated_login_password(::std::string* login_password) {
  if (login_password_ != &::google::protobuf::internal::kEmptyString) {
    delete login_password_;
  }
  if (login_password) {
    set_has_login_password();
    login_password_ = login_password;
  } else {
    clear_has_login_password();
    login_password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// UserLoginResponse

// required .message.UserLoginResponse.LoginRetCode ret_code = 3;
inline bool UserLoginResponse::has_ret_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserLoginResponse::set_has_ret_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserLoginResponse::clear_has_ret_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserLoginResponse::clear_ret_code() {
  ret_code_ = 0;
  clear_has_ret_code();
}
inline ::message::UserLoginResponse_LoginRetCode UserLoginResponse::ret_code() const {
  return static_cast< ::message::UserLoginResponse_LoginRetCode >(ret_code_);
}
inline void UserLoginResponse::set_ret_code(::message::UserLoginResponse_LoginRetCode value) {
  assert(::message::UserLoginResponse_LoginRetCode_IsValid(value));
  set_has_ret_code();
  ret_code_ = value;
}

// required uint32 userid = 4;
inline bool UserLoginResponse::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserLoginResponse::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserLoginResponse::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserLoginResponse::clear_userid() {
  userid_ = 0u;
  clear_has_userid();
}
inline ::google::protobuf::uint32 UserLoginResponse::userid() const {
  return userid_;
}
inline void UserLoginResponse::set_userid(::google::protobuf::uint32 value) {
  set_has_userid();
  userid_ = value;
}

// -------------------------------------------------------------------

// ChatRequest

// required bytes chat_content = 3;
inline bool ChatRequest::has_chat_content() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChatRequest::set_has_chat_content() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChatRequest::clear_has_chat_content() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChatRequest::clear_chat_content() {
  if (chat_content_ != &::google::protobuf::internal::kEmptyString) {
    chat_content_->clear();
  }
  clear_has_chat_content();
}
inline const ::std::string& ChatRequest::chat_content() const {
  return *chat_content_;
}
inline void ChatRequest::set_chat_content(const ::std::string& value) {
  set_has_chat_content();
  if (chat_content_ == &::google::protobuf::internal::kEmptyString) {
    chat_content_ = new ::std::string;
  }
  chat_content_->assign(value);
}
inline void ChatRequest::set_chat_content(const char* value) {
  set_has_chat_content();
  if (chat_content_ == &::google::protobuf::internal::kEmptyString) {
    chat_content_ = new ::std::string;
  }
  chat_content_->assign(value);
}
inline void ChatRequest::set_chat_content(const void* value, size_t size) {
  set_has_chat_content();
  if (chat_content_ == &::google::protobuf::internal::kEmptyString) {
    chat_content_ = new ::std::string;
  }
  chat_content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChatRequest::mutable_chat_content() {
  set_has_chat_content();
  if (chat_content_ == &::google::protobuf::internal::kEmptyString) {
    chat_content_ = new ::std::string;
  }
  return chat_content_;
}
inline ::std::string* ChatRequest::release_chat_content() {
  clear_has_chat_content();
  if (chat_content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = chat_content_;
    chat_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ChatRequest::set_allocated_chat_content(::std::string* chat_content) {
  if (chat_content_ != &::google::protobuf::internal::kEmptyString) {
    delete chat_content_;
  }
  if (chat_content) {
    set_has_chat_content();
    chat_content_ = chat_content;
  } else {
    clear_has_chat_content();
    chat_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ChatHistoryRequest

// optional uint32 last_time = 2;
inline bool ChatHistoryRequest::has_last_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChatHistoryRequest::set_has_last_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChatHistoryRequest::clear_has_last_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChatHistoryRequest::clear_last_time() {
  last_time_ = 0u;
  clear_has_last_time();
}
inline ::google::protobuf::uint32 ChatHistoryRequest::last_time() const {
  return last_time_;
}
inline void ChatHistoryRequest::set_last_time(::google::protobuf::uint32 value) {
  set_has_last_time();
  last_time_ = value;
}

// -------------------------------------------------------------------

// MessageInfo

// required bytes chat_content = 3;
inline bool MessageInfo::has_chat_content() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MessageInfo::set_has_chat_content() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MessageInfo::clear_has_chat_content() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MessageInfo::clear_chat_content() {
  if (chat_content_ != &::google::protobuf::internal::kEmptyString) {
    chat_content_->clear();
  }
  clear_has_chat_content();
}
inline const ::std::string& MessageInfo::chat_content() const {
  return *chat_content_;
}
inline void MessageInfo::set_chat_content(const ::std::string& value) {
  set_has_chat_content();
  if (chat_content_ == &::google::protobuf::internal::kEmptyString) {
    chat_content_ = new ::std::string;
  }
  chat_content_->assign(value);
}
inline void MessageInfo::set_chat_content(const char* value) {
  set_has_chat_content();
  if (chat_content_ == &::google::protobuf::internal::kEmptyString) {
    chat_content_ = new ::std::string;
  }
  chat_content_->assign(value);
}
inline void MessageInfo::set_chat_content(const void* value, size_t size) {
  set_has_chat_content();
  if (chat_content_ == &::google::protobuf::internal::kEmptyString) {
    chat_content_ = new ::std::string;
  }
  chat_content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MessageInfo::mutable_chat_content() {
  set_has_chat_content();
  if (chat_content_ == &::google::protobuf::internal::kEmptyString) {
    chat_content_ = new ::std::string;
  }
  return chat_content_;
}
inline ::std::string* MessageInfo::release_chat_content() {
  clear_has_chat_content();
  if (chat_content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = chat_content_;
    chat_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MessageInfo::set_allocated_chat_content(::std::string* chat_content) {
  if (chat_content_ != &::google::protobuf::internal::kEmptyString) {
    delete chat_content_;
  }
  if (chat_content) {
    set_has_chat_content();
    chat_content_ = chat_content;
  } else {
    clear_has_chat_content();
    chat_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 send_userid = 4;
inline bool MessageInfo::has_send_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MessageInfo::set_has_send_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MessageInfo::clear_has_send_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MessageInfo::clear_send_userid() {
  send_userid_ = 0u;
  clear_has_send_userid();
}
inline ::google::protobuf::uint32 MessageInfo::send_userid() const {
  return send_userid_;
}
inline void MessageInfo::set_send_userid(::google::protobuf::uint32 value) {
  set_has_send_userid();
  send_userid_ = value;
}

// required uint32 send_time = 5;
inline bool MessageInfo::has_send_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MessageInfo::set_has_send_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MessageInfo::clear_has_send_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MessageInfo::clear_send_time() {
  send_time_ = 0u;
  clear_has_send_time();
}
inline ::google::protobuf::uint32 MessageInfo::send_time() const {
  return send_time_;
}
inline void MessageInfo::set_send_time(::google::protobuf::uint32 value) {
  set_has_send_time();
  send_time_ = value;
}

// -------------------------------------------------------------------

// MsgCacheInfo

// repeated .message.MessageInfo message = 2;
inline int MsgCacheInfo::message_size() const {
  return message_.size();
}
inline void MsgCacheInfo::clear_message() {
  message_.Clear();
}
inline const ::message::MessageInfo& MsgCacheInfo::message(int index) const {
  return message_.Get(index);
}
inline ::message::MessageInfo* MsgCacheInfo::mutable_message(int index) {
  return message_.Mutable(index);
}
inline ::message::MessageInfo* MsgCacheInfo::add_message() {
  return message_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::message::MessageInfo >&
MsgCacheInfo::message() const {
  return message_;
}
inline ::google::protobuf::RepeatedPtrField< ::message::MessageInfo >*
MsgCacheInfo::mutable_message() {
  return &message_;
}

// -------------------------------------------------------------------

// ChatResponse

// required .message.ChatResponse.ChatType chat_type = 2;
inline bool ChatResponse::has_chat_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChatResponse::set_has_chat_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChatResponse::clear_has_chat_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChatResponse::clear_chat_type() {
  chat_type_ = 0;
  clear_has_chat_type();
}
inline ::message::ChatResponse_ChatType ChatResponse::chat_type() const {
  return static_cast< ::message::ChatResponse_ChatType >(chat_type_);
}
inline void ChatResponse::set_chat_type(::message::ChatResponse_ChatType value) {
  assert(::message::ChatResponse_ChatType_IsValid(value));
  set_has_chat_type();
  chat_type_ = value;
}

// repeated .message.MessageInfo message = 3;
inline int ChatResponse::message_size() const {
  return message_.size();
}
inline void ChatResponse::clear_message() {
  message_.Clear();
}
inline const ::message::MessageInfo& ChatResponse::message(int index) const {
  return message_.Get(index);
}
inline ::message::MessageInfo* ChatResponse::mutable_message(int index) {
  return message_.Mutable(index);
}
inline ::message::MessageInfo* ChatResponse::add_message() {
  return message_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::message::MessageInfo >&
ChatResponse::message() const {
  return message_;
}
inline ::google::protobuf::RepeatedPtrField< ::message::MessageInfo >*
ChatResponse::mutable_message() {
  return &message_;
}

// -------------------------------------------------------------------

// ChatUpdateRequest

// required uint32 last_time = 2;
inline bool ChatUpdateRequest::has_last_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChatUpdateRequest::set_has_last_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChatUpdateRequest::clear_has_last_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChatUpdateRequest::clear_last_time() {
  last_time_ = 0u;
  clear_has_last_time();
}
inline ::google::protobuf::uint32 ChatUpdateRequest::last_time() const {
  return last_time_;
}
inline void ChatUpdateRequest::set_last_time(::google::protobuf::uint32 value) {
  set_has_last_time();
  last_time_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_common_2eproto__INCLUDED
